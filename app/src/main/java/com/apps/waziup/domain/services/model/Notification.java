/*
 * WAZIUP API
 * This API allows you to access all Waziup services. In order to access protected services, first get a token with POST /auth/token. Then insert this token in the authorization key, specifying \"Bearer\" in front. For example \"Bearer: eyJhbGc...\".
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.apps.waziup.domain.services.model;

import com.google.gson.annotations.SerializedName;

import java.math.BigDecimal;
import java.util.Objects;

import io.swagger.annotations.ApiModelProperty;

/**
 * Notification
 */

public class Notification {
    @SerializedName("id")
    private String id = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("subject")
    private NotificationSubject subject = null;

    @SerializedName("notification")
    private SocialMessageBatch notification = null;

    @SerializedName("throttling")
    private BigDecimal throttling = null;

    public Notification id(String id) {
        this.id = id;
        return this;
    }

    /**
     * id of the notification (attributed by the server)
     *
     * @return id
     **/
    @ApiModelProperty(value = "id of the notification (attributed by the server)")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Notification description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Description of the notification
     *
     * @return description
     **/
    @ApiModelProperty(example = "Send text message", value = "Description of the notification")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Notification subject(NotificationSubject subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Get subject
     *
     * @return subject
     **/
    @ApiModelProperty(required = true, value = "")
    public NotificationSubject getSubject() {
        return subject;
    }

    public void setSubject(NotificationSubject subject) {
        this.subject = subject;
    }

    public Notification notification(SocialMessageBatch notification) {
        this.notification = notification;
        return this;
    }

    /**
     * Get notification
     *
     * @return notification
     **/
    @ApiModelProperty(required = true, value = "")
    public SocialMessageBatch getNotification() {
        return notification;
    }

    public void setNotification(SocialMessageBatch notification) {
        this.notification = notification;
    }

    public Notification throttling(BigDecimal throttling) {
        this.throttling = throttling;
        return this;
    }

    /**
     * minimum interval between two messages in seconds
     *
     * @return throttling
     **/
    @ApiModelProperty(example = "3600.0", value = "minimum interval between two messages in seconds")
    public BigDecimal getThrottling() {
        return throttling;
    }

    public void setThrottling(BigDecimal throttling) {
        this.throttling = throttling;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Notification notification = (Notification) o;
        return Objects.equals(this.id, notification.id) &&
                Objects.equals(this.description, notification.description) &&
                Objects.equals(this.subject, notification.subject) &&
                Objects.equals(this.notification, notification.notification) &&
                Objects.equals(this.throttling, notification.throttling);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, description, subject, notification, throttling);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Notification {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
        sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
        sb.append("    throttling: ").append(toIndentedString(throttling)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

